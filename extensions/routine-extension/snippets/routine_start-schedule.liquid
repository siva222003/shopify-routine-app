<style>
  .custom-date {
    background: none;
  }
  .custom-fieldset {
    padding-top: 4px;
    padding-bottom: 8px;
  }
</style>

<div
  x-show="tab===3"
  x-cloak
  class="md:max-w-[90%] max-ssmdd:w-full slide-in-bottom max-ssmdd:px-[5px] max-sm:w-[80%] max-md:w-[70%] max-lMd:w-[60%] mx-auto "
>
  <div class="flex my-6  sm:my-10 max-sm:ml-[20px] items-center justify-center">
    <h1 class="font-[500] flex-1 max-sm:max-w-[90%] text-center text-[24px] md:text-[26px]  text-[#434343] my-[10px] ">
      Add Details
    </h1>
  </div>

  <div class="antialiased sans-serif ">
    <div x-data="app()" x-init="[initDate(), getNoOfDays()]" x-cloak>
      <div class="flex max-lMd:flex-col w-full  max-lMd:gap-[26px] mt-[40px] justify-center lMd:gap-[9rem] items-center">
        <fieldset class="border-2 px-4 w-[100%] h-[64px] ssmd:w-[380px] lg:w-[430px]  flex items-center rounded-3xl">
          <legend class="text-primaryGrey text-[12px] custom-fieldset-legend">WhatsApp Number</legend>
          <input
            x-model="whatsapp"
            type="text"
            name="whatsapp"
            class=" custom-fieldset custom-input-border focus:outline-none bg-transparent w-full focus:shadow-none"
            id="whatsapp"
          >
        </fieldset>

        <fieldset class="border-2 px-4 flex items-center rounded-3xl w-[100%] ssmd:w-[380px] lg:w-[430px] max-lMd:mx-auto ">
          <legend class="text-primaryGrey text-[12px] custom-fieldset-legend">Start Date</legend>

          <div class="mb-5 h-full w-full">
            <div class="relative ">
              <input type="hidden" name="date" x-ref="date" :value="userRoutineStartDate">
              <input
                type="text"
                x-on:click="showDatepicker = !showDatepicker"
                x-model="userRoutineStartDate"
                x-on:keydown.escape="showDatepicker = false"
                class="w-full pl-4 pr-10 py-3 leading-none focus:shadow-none rounded-lg custom-input-border custom-date focus:outline-none text-gray-600 font-medium "
                placeholder="Select date"
                readonly
              >

              <div class="absolute top-0 right-0 px-3 py-2">
                <svg class="h-10 w-10 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
              </div>

              <div
                class="bg-white mt-12 rounded-lg shadow p-4 absolute top-4 z-10 left-0"
                x-show.transition="showDatepicker"
                @click.away="showDatepicker = false"
              >
                <div class="flex justify-between items-center mb-2 ">
                  <div>
                    <span x-text="MONTH_NAMES[month]" class="text-[18px] font-bold text-gray-800"></span>
                    <span x-text="year" class="ml-1 text-lg text-gray-600 text-[16px] font-normal"></span>
                  </div>
                  <div>
                    <button
                      type="button"
                      class="focus:outline-none focus:shadow-outline transition ease-in-out duration-100 inline-flex cursor-pointer hover:bg-gray-100 p-1 rounded-full"
                      @click="
                        if (month == 0) {
                          year--;
                          month = 12;
                        } month--; getNoOfDays()
                      "
                    >
                      <svg
                        class="h-6 w-6 text-gray-400 inline-flex"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                      </svg>
                    </button>
                    <button
                      type="button"
                      class="focus:outline-none focus:shadow-outline transition ease-in-out duration-100 inline-flex cursor-pointer hover:bg-gray-100 p-1 rounded-full"
                      @click="
                        if (month == 11) {
                          month = 0;
                          year++;
                        } else {
                          month++;
                        } getNoOfDays()
                      "
                    >
                      <svg
                        class="h-6 w-6 text-gray-400 inline-flex"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                      </svg>
                    </button>
                  </div>
                </div>

                <div class="flex flex-wrap mb-3 -mx-1">
                  <template x-for="(day, index) in DAYS" :key="index">
                    <div style="width: 14.26%" class="px-0.5">
                      <div x-text="day" class="text-gray-800 text-[14px] font-medium text-center"></div>
                    </div>
                  </template>
                </div>

                <div class="flex flex-wrap -mx-1">
                  <template x-for="blankday in blankdays">
                    <div style="width: 14.28%" class="text-center border p-1 border-transparent text-sm"></div>
                  </template>
                  <template x-for="(date, dateIndex) in no_of_days" :key="dateIndex">
                    <div style="width: 14.28%" class="px-1 mb-1">
                      <div
                        @click="getDateValue(date)"
                        x-text="date"
                        class="cursor-pointer  w-[40px] h-[40px] flex justify-center items-center text-[13px] rounded-full leading-loose transition ease-in-out duration-100"
                        :class="
                          {
                            'bg-primaryCream': isToday(date) == true,
                            'text-gray-600 hover:bg-indigo-200': isToday(date) == false && isSelectedDate(date) == false,
                            'bg-primaryGreen text-white hover:bg-opacity-75': isSelectedDate(date) == true
                          }
                        "
                      ></div>
                    </div>
                  </template>
                </div>
              </div>
            </div>
          </div>
        </fieldset>
      </div>
    </div>
  </div>
  <!-- Buttons -->

  <div class="flex flex-col items-center  ">
    <button
      style="box-shadow: 0px 4px 14px 0px rgba(58, 100, 59, 0.25);"
      x-show="!isCreatingRoutine"
      :disabled="isCreatingRoutine"
      @click="startRoutine()"
      class="w-[350px] h-[59px] mt-[100px] rounded-3xl bg-[#3A643B] disabled:opacity-60 text-white text-[16px]"
    >
      <span>Proceed</span>
    </button>
    <button
      style=" border: 1px color: #3A643B;"
      x-show="!isCreatingRoutine"
      :disabled="isCreatingRoutine"
      @click="changeTab(2)"
      class="w-[350px] h-[59px] mt-[10px] mb-[200px] rounded-3xl disabled:opacity-60  text-[16px]"
    >
      <span>Back</span>
    </button>
    <div
      x-cloak
      x-show="isCreatingRoutine"
      class="w-[350px] h-[59px] mt-[100px] mb-[200px] rounded-3xl flex justify-center items-center  opacity-50 mx-auto  disabled:opacity-50 bg-[#3A643B] text-white shadow-lg "
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        aria-hidden="true"
        class="size-9 fill-neutral-600 motion-safe:animate-spin dark:fill-neutral-300"
      >
        <path d="M12,1A11,11,0,1,0,23,12,11,11,0,0,0,12,1Zm0,19a8,8,0,1,1,8-8A8,8,0,0,1,12,20Z" opacity=".25" />
        <path d="M10.14,1.16a11,11,0,0,0-9,8.92A1.59,1.59,0,0,0,2.46,12,1.52,1.52,0,0,0,4.11,10.7a8,8,0,0,1,6.66-6.61A1.42,1.42,0,0,0,12,2.69h0A1.57,1.57,0,0,0,10.14,1.16Z" />
      </svg>
    </div>
  </div>
</div>

<script>
  const MONTH_NAMES = [
    'January',
    'February',
    'March',
    'April',
    'May',
    'June',
    'July',
    'August',
    'September',
    'October',
    'November',
    'December',
  ];
  const MONTH_SHORT_NAMES = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
  const DAYS = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

  function app() {
    return {
      showDatepicker: false,
      selectedDate: new Date().toLocaleDateString('en-CA'),
      dateFormat: 'DD-MM-YYYY',
      month: '',
      year: '',
      no_of_days: [],
      blankdays: [],
      initDate() {
        let today;
        if (this.selectedDate) {
          today = new Date(Date.parse(this.selectedDate));
        } else {
          today = new Date();
        }
        this.month = today.getMonth();
        this.year = today.getFullYear();
        this.userRoutineStartDate = this.formatDateForDisplay(today);
      },
      formatDateForDisplay(date) {
        let formattedDay = DAYS[date.getDay()];
        let formattedDate = ('0' + date.getDate()).slice(-2); // appends 0 (zero) in single digit date
        let formattedMonth = MONTH_NAMES[date.getMonth()];
        let formattedMonthShortName = MONTH_SHORT_NAMES[date.getMonth()];
        let formattedMonthInNumber = ('0' + (parseInt(date.getMonth()) + 1)).slice(-2);
        let formattedYear = date.getFullYear();
        if (this.dateFormat === 'DD-MM-YYYY') {
          return `${formattedDate}-${formattedMonthInNumber}-${formattedYear}`; // 02-04-2021
        }
        if (this.dateFormat === 'YYYY-MM-DD') {
          return `${formattedYear}-${formattedMonthInNumber}-${formattedDate}`; // 2021-04-02
        }
        if (this.dateFormat === 'D d M, Y') {
          return `${formattedDay} ${formattedDate} ${formattedMonthShortName} ${formattedYear}`; // Tue 02 Mar 2021
        }
        return `${formattedDay} ${formattedDate} ${formattedMonth} ${formattedYear}`;
      },
      isSelectedDate(date) {
        const d = new Date(this.year, this.month, date);
        return this.userRoutineStartDate === this.formatDateForDisplay(d) ? true : false;
      },
      isToday(date) {
        const today = new Date();
        const d = new Date(this.year, this.month, date);
        return today.toDateString() === d.toDateString() ? true : false;
      },
      getDateValue(date) {
        let selectedDate = new Date(this.year, this.month, date);
        this.userRoutineStartDate = this.formatDateForDisplay(selectedDate);
        // this.$refs.date.value = selectedDate.getFullYear() + "-" + ('0' + formattedMonthInNumber).slice(-2) + "-" + ('0' + selectedDate.getDate()).slice(-2);
        this.isSelectedDate(date);
        this.showDatepicker = false;
      },
      getNoOfDays() {
        let daysInMonth = new Date(this.year, this.month + 1, 0).getDate();
        // find where to start calendar day of week
        let dayOfWeek = new Date(this.year, this.month).getDay();
        let blankdaysArray = [];
        for (var i = 1; i <= dayOfWeek; i++) {
          blankdaysArray.push(i);
        }
        let daysArray = [];
        for (var i = 1; i <= daysInMonth; i++) {
          daysArray.push(i);
        }
        this.blankdays = blankdaysArray;
        this.no_of_days = daysArray;
      },
    };
  }
</script>
